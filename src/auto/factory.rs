// This file was generated by gir (https://github.com/gtk-rs/gir @ a6737c7)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use gio;
use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib_sys;
use ibus_sys;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use Engine;

glib_wrapper! {
    pub struct Factory(Object<ibus_sys::IBusFactory, ibus_sys::IBusFactoryClass, FactoryClass>);

    match fn {
        get_type => || ibus_sys::ibus_factory_get_type(),
    }
}

impl Factory {
    pub fn new(connection: &gio::DBusConnection) -> Factory {
        unsafe {
            from_glib_none(ibus_sys::ibus_factory_new(connection.to_glib_none().0))
        }
    }
}

pub const NONE_FACTORY: Option<&Factory> = None;

pub trait FactoryExt: 'static {
    fn add_engine(&self, engine_name: &str, engine_type: glib::types::Type);

    fn create_engine(&self, engine_name: &str) -> Option<Engine>;

    fn connect_create_engine<F: Fn(&Self, &str) -> Option<Engine> + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Factory>> FactoryExt for O {
    fn add_engine(&self, engine_name: &str, engine_type: glib::types::Type) {
        unsafe {
            ibus_sys::ibus_factory_add_engine(self.as_ref().to_glib_none().0, engine_name.to_glib_none().0, engine_type.to_glib());
        }
    }

    fn create_engine(&self, engine_name: &str) -> Option<Engine> {
        unsafe {
            from_glib_full(ibus_sys::ibus_factory_create_engine(self.as_ref().to_glib_none().0, engine_name.to_glib_none().0))
        }
    }

    fn connect_create_engine<F: Fn(&Self, &str) -> Option<Engine> + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn create_engine_trampoline<P, F: Fn(&P, &str) -> Option<Engine> + 'static>(this: *mut ibus_sys::IBusFactory, engine_name: *mut libc::c_char, f: glib_sys::gpointer) -> *mut ibus_sys::IBusEngine
            where P: IsA<Factory>
        {
            let f: &F = &*(f as *const F);
            f(&Factory::from_glib_borrow(this).unsafe_cast_ref(), &GString::from_glib_borrow(engine_name)).to_glib_full()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"create-engine\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(create_engine_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Factory {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Factory")
    }
}
