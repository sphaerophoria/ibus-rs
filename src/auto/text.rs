// This file was generated by gir (https://github.com/gtk-rs/gir @ a6737c7)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use glib::GString;
use ibus_sys;
use std::fmt;

glib_wrapper! {
    pub struct Text(Object<ibus_sys::IBusText, ibus_sys::IBusTextClass, TextClass>);

    match fn {
        get_type => || ibus_sys::ibus_text_get_type(),
    }
}

impl Text {
    //pub fn from_printf(fmt: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> Text {
    //    unsafe { TODO: call ibus_sys:ibus_text_new_from_printf() }
    //}

    pub fn from_static_string(str: &str) -> Text {
        unsafe {
            from_glib_none(ibus_sys::ibus_text_new_from_static_string(str.to_glib_none().0))
        }
    }

    pub fn from_string(str: &str) -> Text {
        unsafe {
            from_glib_none(ibus_sys::ibus_text_new_from_string(str.to_glib_none().0))
        }
    }

    pub fn from_unichar(c: char) -> Text {
        unsafe {
            from_glib_none(ibus_sys::ibus_text_new_from_unichar(c.to_glib()))
        }
    }
}

pub const NONE_TEXT: Option<&Text> = None;

pub trait TextExt: 'static {
    fn append_attribute(&self, type_: u32, value: u32, start_index: u32, end_index: i32);

    //fn get_attributes(&self) -> /*Ignored*/Option<AttrList>;

    fn get_is_static(&self) -> bool;

    fn get_length(&self) -> u32;

    fn get_text(&self) -> Option<GString>;

    //fn set_attributes(&self, attrs: /*Ignored*/&AttrList);
}

impl<O: IsA<Text>> TextExt for O {
    fn append_attribute(&self, type_: u32, value: u32, start_index: u32, end_index: i32) {
        unsafe {
            ibus_sys::ibus_text_append_attribute(self.as_ref().to_glib_none().0, type_, value, start_index, end_index);
        }
    }

    //fn get_attributes(&self) -> /*Ignored*/Option<AttrList> {
    //    unsafe { TODO: call ibus_sys:ibus_text_get_attributes() }
    //}

    fn get_is_static(&self) -> bool {
        unsafe {
            from_glib(ibus_sys::ibus_text_get_is_static(self.as_ref().to_glib_none().0))
        }
    }

    fn get_length(&self) -> u32 {
        unsafe {
            ibus_sys::ibus_text_get_length(self.as_ref().to_glib_none().0)
        }
    }

    fn get_text(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ibus_sys::ibus_text_get_text(self.as_ref().to_glib_none().0))
        }
    }

    //fn set_attributes(&self, attrs: /*Ignored*/&AttrList) {
    //    unsafe { TODO: call ibus_sys:ibus_text_set_attributes() }
    //}
}

impl fmt::Display for Text {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Text")
    }
}
